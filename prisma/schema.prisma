// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id String @id @default(cuid())

  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")

  image    String?
  backdrop String?
  about    String?

  verified   Boolean @default(false)
  onboarding Boolean @default(false)

  accounts Account[]
  sessions Session[]

  publications   Publication[]
  republications Republication[]
  comments       Comment[]
  likes          Like[]
  bookmarks      Bookmark[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("users")
}

enum Visibility {
  PUBLIC
  PRIVATE
  HIDDEN
}

model Publication {
  id String @id @default(cuid())

  content String
  media   String[]

  visibility Visibility

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @map("creator_id")

  republications Republication[]
  comments       Comment[]

  likes Like[]
  bookmarks Bookmark[]

  @@map("publications")
}

model Republication {
  id String @id @default(cuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @map("creator_id")

  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String      @map("publication_id")

  @@map("republications")
}

model Comment {
  id String @id @default(cuid())

  content String
  media   String[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @map("creator_id")

  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String      @map("publication_id")

  @@map("comments")
}

model Like {
  id String @id @default(cuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String      @map("publication_id")

  @@map("likes")
}

model Bookmark {
  id String @id @default(cuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String      @map("publication_id")

  @@map("bookmarks")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
